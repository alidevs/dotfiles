;;;;;;
; CPU Metric
;;;;;;

(defwidget cpu_meter []
  (eventbox
    :tooltip "CPU Usage: ${round(EWW_CPU.avg, 1)}%"
    (box
      :class "panel cpu"
      :space-evenly false
      (label
        :class "cpu-label"
        :text "CPU"
      )
      (label
        :class "cpu-percent ${EWW_CPU.avg > 80 ? "critical" : ""}"
        :text "${round(EWW_CPU.avg, 1)}%"
      )
    )
  )
)


;;;;;;
;; Memory Usage
;;;;;;
(defpoll mem :interval "2s" `free -m | awk '/Mem:/ {print int($3*100/$2)}'`)
(defwidget mem_meter []
  (eventbox
    :tooltip "Memory Usage: ${mem}%"
    (box
      :class "panel mem" 
      :spacing 5
      (label
        :text "${mem}%"
        :class "value ${mem > 80 ? "critical" : ""}"
      )
      (image 
        :path "images/icons/memory.svg" 
        :image-width 20 
        :image-height 20)
    )
  )
)

;;;;;;
; Workspace Switcher
;;;;;;

(defvar workspaces "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
(defpoll current_ws
  :interval "50ms"
  `hyprctl activeworkspace -j | jq -r '.id'`)
(defwidget workspace_switcher []
  (box
    :class "button_panel" 
    :orientation "h"
    (for ws in workspaces
      (button
        :class "btn ${ws == current_ws ? "active" : ""}"
        :onclick "hyprctl dispatch workspace ${ws}"
        ws
      )
    )
  )
)

;;;;;;
;; Disk Usage
;;;;;;

(defpoll disk :interval "60s" `df -h / | awk 'NR==2 {print $5}'`)
(defwidget disk_widget []
  (eventbox
    :tooltip "Disk usage: ${disk}"
    (box
      :class "panel disk"
      :spacing 5
      (label
        :text {disk}
        :class "value")
      (image
        :path "images/icons/disk.svg"
        :image-width 20
        :image-height 20)
    )
  )
)

;;;;;;
; Date and Time
;;;;;;

(defpoll date :interval "1m" `date '+%a %d %b'`)
(defwidget date-panel []
  (eventbox
    :tooltip "Today's date"
    (box :class "panel clock"
      (label
        :text {date}
        :class "label"
      )
    )
  )
)

(defpoll time :interval "1s" `date '+%I:%M:%S %p'`)
(defwidget clock []
  (eventbox
    :tooltip "Current time"
    (box :class "panel clock"
      (label
        :text {time}
        :class "label"
      )
    )
  )
)

;;;;;;
; Network Status
;;;;;;

(defpoll network_icon :interval "5s" `scripts/network --icon`)
(defpoll network_status :interval "5s" `scripts/network --stat`)

(defwidget network []
  (box :class "panel network"
    (label
      :text {network_status}
      :class "label"
    )
  )
)

;;;;;;
; Front App (Current Window)
;;;;;;

(defpoll front_app :interval "1s" `scripts/get_app_name`)
(defwidget front_app []
  (eventbox
    :tooltip "Current Application: ${front_app}"
    (box
      :class "panel front-app"
      (label
        :text {front_app}
        :class "label"
      )
    )
  )
)

;;;;;;
; Spotify
;;;;;;

(defpoll spotify_status :interval "2s" `playerctl status 2>/dev/null || echo "stopped"`)
(defpoll spotify_title :interval "2s" `playerctl metadata title 2>/dev/null || echo ""`)
(defpoll spotify_artist :interval "2s" `playerctl metadata artist 2>/dev/null || echo ""`)

(defwidget spotify []
  (eventbox
    :tooltip "Spotify: ${spotify_title} - ${spotify_artist}"
    :onclick "playerctl -p spotify play-pause"
    (box :class "panel spotify ${spotify_status == "Playing" ? "playing" : ""}"
      :space-evenly false
      (label
        :text {spotify_status == "Playing" ? "⏸" : "▶"}
        :class "spotify-icon"
      )
      (label
        :text {spotify_title != "" ? "${spotify_title} - ${spotify_artist}" : "No music playing"}
        :class "spotify-text"
        :limit-width 100
      )
    )
  )
)

;;;;;;
; Battery
;;;;;;

(defpoll battery_percent :interval "30s" `cat /sys/class/power_supply/BAT*/capacity 2>/dev/null | head -1 || echo "100"`)
(defpoll battery_status :interval "30s" `cat /sys/class/power_supply/BAT*/status 2>/dev/null | head -1 || echo "Unknown"`)

(defwidget battery []
  (eventbox
    :tooltip "Battery: ${battery_percent}% (${battery_status})"
    (box :class "panel battery"
      (label
        :text {battery_status == "Charging" ? "🔌" : 
               battery_percent >= 75 ? "🔋" :
               battery_percent >= 50 ? "🔋" :
               battery_percent >= 25 ? "🔋" :
               battery_percent >= 10 ? "🪫" : "🪫"}
        :class "battery-icon ${battery_percent <= 25 ? "critical" : ""}"
      )
    )
  )
)

;;;;;;
; Volume
;;;;;;

(defpoll volume_level :interval "1s" `scripts/getvol`)
(defpoll volume_muted :interval "1s" `pactl get-sink-mute @DEFAULT_SINK@ | grep -q "yes" && echo "true" || echo "false"`)

(defwidget volume []
  (eventbox
    :tooltip "Volume: ${volume_level}%"
    :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"
    (box :class "panel volume"
      (label
        :text {volume_muted == "true" ? "🔇" :
               volume_level >= 66 ? "🔊" :
               volume_level >= 33 ? "🔉" :
               volume_level >= 10 ? "🔉" : "🔈"}
        :class "volume-icon"
      )
    )
  )
)

;;;;;;
; Pacman Updates
;;;;;;

(defpoll UPDATES :interval "2m" `(checkupdates; yay -Qua) | wc -l`)
(defwidget yay_updates []
  (eventbox
    :tooltip "${UPDATES} package updates available"
    (box
      :class "panel brew"
      :spacing 5
      (label
        :text {UPDATES}
        :class "label"
      )
      (image
        :path "images/icons/pacman.svg"
        :image-width 20
        :image-height 20
      )
    )
  )
)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :wm-ignore false
  :stacking "fg"
  :exclusive true
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "22px"
    :anchor "top center"
  )
  :reserve (struts
    :distance "22px"
    :side "top"
  )
  (centerbox
    :orientation "h"
    :class "bar-container"
    (box
      :class "main"
      :spacing "12"
      :space-evenly false
      :halign "start"
      (workspace_switcher)
      (front_app)
    )
    (box
      :class "center-section"
      :spacing "0"
      :space-evenly false
      :hexpand true
      (spotify)
    )
    (box
      :class "main"
      :spacing "12"
      :space-evenly false
      :halign "end"
      (eventbox
        :tooltip "Current date and time"
        (box
          :class "panel clock"
          :orientation "h"
          :space-evenly false
          (label
            :text {date}
            :class "clock-label"
          )
          (label
            :text {time}
            :class "clock-label"
          )
        )
      )
      (yay_updates)
      (cpu_meter)
    )
  )
)
